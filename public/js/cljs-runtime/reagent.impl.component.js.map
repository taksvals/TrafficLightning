{"version":3,"sources":["reagent/impl/component.cljs"],"mappings":"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","names":["reagent.impl.component/shallow-obj-to-map","o","ks","cljs.core/js-keys","len","m","i","k","cljs.core.assoc","cljs.core.keyword","goog.object/get","reagent.impl.component/extract-props","v","p","cljs.core.nth","cljs.core/map?","reagent.impl.component/extract-children","first-child","cljs.core/count","cljs.core.subvec","reagent.impl.component/props-argv","c","temp__5755__auto__","a","reagent.impl.component/get-argv","reagent.impl.component/get-props","reagent.impl.component/get-children","js/module$node_modules$react$index.Children.toArray","cljs.core.into","reagent.impl.component/reagent-class?","cljs.core/fn?","G__56095","reagent.impl.component/react-class?","G__56097","reagent.impl.component/reagent-component?","reagent.impl.component/cached-react-class","reagent.impl.component/cache-react-class","constructor","reagent.impl.component/state-atom","this","sa","reagent.ratom.atom","js/reagent","js/reagent.impl","js/reagent.impl.component","js/reagent.impl.component.as-element","reagent.impl.component/as-element","reagent.impl.component/wrap-render","f","_","cljs.core/ifn?","js/Error","cljs.core.pr_str","res","n","G__56108","cljs.core.into_array","cljs.core/vector?","args","G__56110","cljs.core.apply","cljs.core/vector","reagent.impl.component/component-name","G__56111","reagent.impl.component/comp-name","reagent.impl.component/*current-component*","cljs.core/empty?","reagent.impl.component/do-render","*current-component*-orig-val__56112","*current-component*-temp-val__56113","ok","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","reagent.impl.component/rat-opts","reagent.impl.component/static-fns","reagent.impl.util/*non-reactive*","rat","reagent.impl.batching/mark-rendered","reagent.ratom/run-in-reaction","reagent.impl.batching/queue-render","reagent.impl.component/custom-wrapper","key","G__56115","cljs.core/Keyword","props","state","cljs.core/reset!","oldprops","oldstate","nextprops","nextstate","or__4223__auto__","reagent.impl.util/*always-update*","old-argv","new-argv","noargv","e56123","cljs.core.not_EQ_","e","snapshot","G__56152","reagent.ratom/dispose!","error","info","reagent.impl.component/get-wrapper","wrap","and__4221__auto__","reagent.impl.component/obligatory","reagent.impl.component/dash-to-method-name","reagent.impl.util/memoize-1","reagent.impl.util/dash-to-method-name","reagent.impl.component/camelify-map-keys","fun-map","cljs.core/reduce-kv","reagent.impl.component/add-obligatory","cljs.core.merge","reagent.impl.component/wrap-funs","fmap","renders","cljs.core/select-keys","render-fun","cljs.core/vals","cljs.core/first","cljs.core/not","legacy-render","name","reagent.impl.util/fun-name","cljs.core.gensym","reagent.impl.component/map-to-js","G__56183","goog.object/set","cljs.core/name","reagent.impl.component/cljsify","body","reagent.impl.component/built-in-static-method-names","reagent.impl.component/create-class","methods","cljs.core/dissoc","static-methods","display-name","get-initial-state","construct","cmp","context","updater","js/module$node_modules$react$index.Component","reagent.impl.batching/next-mount-count","goog.object/extend","writer","opt","cljs.core/-write","reagent.impl.component/fn-to-class","spec","cljs.core/meta","withrender","reagent.impl.component/as-class","tag","cached-class","reagent.impl.component/reactify-component","comp"],"sourcesContent":["(ns reagent.impl.component\n  (:require [goog.object :as gobj]\n            [react :as react]\n            [reagent.impl.util :as util]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [reagent.debug :refer-macros [dev? warn error warn-unless assert-callable]]))\n\n(declare ^:dynamic *current-component*)\n\n\n;;; Argv access\n\n(defn shallow-obj-to-map [o]\n  (let [ks (js-keys o)\n        len (alength ks)]\n    (loop [m {}\n           i 0]\n      (if (< i len)\n        (let [k (aget ks i)]\n          (recur (assoc m (keyword k) (gobj/get o k))\n                 (inc i)))\n        m))))\n\n(defn extract-props [v]\n  (let [p (nth v 1 nil)]\n    (if (map? p) p)))\n\n(defn extract-children [v]\n  (let [p (nth v 1 nil)\n        first-child (if (or (nil? p) (map? p)) 2 1)]\n    (if (> (count v) first-child)\n      (subvec v first-child))))\n\n(defn props-argv [^js/React.Component c p]\n  (if-some [a (.-argv p)]\n    a\n    [(.-constructor c) (shallow-obj-to-map p)]))\n\n(defn get-argv [^js/React.Component c]\n  (props-argv c (.-props c)))\n\n(defn get-props [^js/React.Component c]\n  (let [p (.-props c)]\n    (if-some [v (.-argv p)]\n      (extract-props v)\n      (shallow-obj-to-map p))))\n\n(defn get-children [^js/React.Component c]\n  (let [p (.-props c)]\n    (if-some [v (.-argv p)]\n      (extract-children v)\n      (->> (.-children p)\n           (react/Children.toArray)\n           (into [])))))\n\n(defn ^boolean reagent-class? [c]\n  (and (fn? c)\n       (some? (some-> c (.-prototype) (.-reagentRender)))))\n\n(defn ^boolean react-class? [c]\n  (and (fn? c)\n       (some? (some-> c (.-prototype) (.-render)))))\n\n(defn ^boolean reagent-component? [^clj c]\n  (some? (.-reagentRender c)))\n\n(defn cached-react-class [^clj c]\n  (.-cljsReactClass c))\n\n(defn cache-react-class [^clj c constructor]\n  (set! (.-cljsReactClass c) constructor))\n\n\n;;; State\n\n(defn state-atom [^clj this]\n  (let [sa (.-cljsState this)]\n    (if-not (nil? sa)\n      sa\n      (set! (.-cljsState this) (ratom/atom nil)))))\n\n;; avoid circular dependency: this gets set from template.cljs\n(defonce as-element nil)\n\n\n;;; Rendering\n\n(defn wrap-render\n  \"Calls the render function of the component `c`.  If result `res` evaluates to a:\n     1) Vector (form-1 component) - Treats the vector as hiccup and returns\n        a react element with a render function based on that hiccup\n     2) Function (form-2 component) - updates the render function to `res` i.e. the internal function\n        and calls wrap-render again (`recur`), until the render result doesn't evaluate to a function.\n     3) Anything else - Returns the result of evaluating `c`\"\n  [^clj c]\n  (let [f (.-reagentRender c)\n        _ (assert-callable f)\n        ;; cljsLegacyRender tells if this calls was defined\n        ;; using :render instead of :reagent-render\n        ;; in that case, the :render fn is called with just `this` as argument.\n        res (if (true? (.-cljsLegacyRender c))\n              (.call f c c)\n              (let [v (get-argv c)\n                    n (count v)]\n                (case n\n                  1 (.call f c)\n                  2 (.call f c (nth v 1))\n                  3 (.call f c (nth v 1) (nth v 2))\n                  4 (.call f c (nth v 1) (nth v 2) (nth v 3))\n                  5 (.call f c (nth v 1) (nth v 2) (nth v 3) (nth v 4))\n                  (.apply f c (.slice (into-array v) 1)))))]\n    (cond\n      (vector? res) (as-element res)\n      (ifn? res) (let [f (if (reagent-class? res)\n                           (fn [& args]\n                             (as-element (apply vector res args)))\n                           res)]\n                   (set! (.-reagentRender c) f)\n                   (recur c))\n      :else res)))\n\n(defn component-name [c]\n  (some-> c .-constructor .-displayName))\n\n(defn comp-name []\n  (if (dev?)\n    (let [c *current-component*\n          n (component-name c)]\n      (if-not (empty? n)\n        (str \" (in \" n \")\")\n        \"\"))\n    \"\"))\n\n(defn do-render [c]\n  (binding [*current-component* c]\n    (if (dev?)\n      ;; Log errors, without using try/catch (and mess up call stack)\n      (let [ok (array false)]\n        (try\n          (let [res (wrap-render c)]\n            (aset ok 0 true)\n            res)\n          (finally\n            (when-not (aget ok 0)\n              (error (str \"Error rendering component\"\n                          (comp-name)))))))\n      (wrap-render c))))\n\n\n;;; Method wrapping\n\n(def rat-opts {:no-cache true})\n\n(def static-fns\n  {:render\n   (fn render []\n     ;; TODO: Use static property for cljsRatom\n     (this-as c (if util/*non-reactive*\n                  (do-render c)\n                  (let [^clj rat (gobj/get c \"cljsRatom\")]\n                    (batch/mark-rendered c)\n                    (if (nil? rat)\n                      (ratom/run-in-reaction #(do-render c) c \"cljsRatom\"\n                                             batch/queue-render rat-opts)\n                      (._run rat false))))))})\n\n(defn custom-wrapper [key f]\n  (case key\n    :getDefaultProps\n    (throw (js/Error. \"getDefaultProps not supported\"))\n\n    :getDerivedStateFromProps\n    (fn getDerivedStateFromProps [props state]\n      ;; Read props from Reagent argv\n      (.call f nil (if-some [a (.-argv props)] (extract-props a) props) state))\n\n    ;; In ES6 React, this is now part of the constructor\n    :getInitialState\n    (fn getInitialState [c]\n      (reset! (state-atom c) (.call f c c)))\n\n    :getSnapshotBeforeUpdate\n    (fn getSnapshotBeforeUpdate [oldprops oldstate]\n      (this-as c (.call f c c (props-argv c oldprops) oldstate)))\n\n    ;; Deprecated - warning in 16.9 will work through 17.x\n    :componentWillReceiveProps\n    (fn componentWillReceiveProps [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    ;; Deprecated - will work in 17.x\n    :UNSAFE_componentWillReceiveProps\n    (fn componentWillReceiveProps [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :shouldComponentUpdate\n    (fn shouldComponentUpdate [nextprops nextstate]\n      (or util/*always-update*\n          (this-as c\n                   ;; Don't care about nextstate here, we use forceUpdate\n                   ;; when only when state has changed anyway.\n                   (let [old-argv (.. c -props -argv)\n                         new-argv (.-argv nextprops)\n                         noargv (or (nil? old-argv) (nil? new-argv))]\n                     (cond\n                       (nil? f) (or noargv (try (not= old-argv new-argv)\n                                                (catch :default e\n                                                  (warn \"Exception thrown while comparing argv's in shouldComponentUpdate: \" old-argv \" \" new-argv \" \" e)\n                                                  false)))\n                       noargv (.call f c c (get-argv c) (props-argv c nextprops))\n                       :else  (.call f c c old-argv new-argv))))))\n\n    ;; Deprecated - warning in 16.9 will work through 17.x\n    :componentWillUpdate\n    (fn componentWillUpdate [nextprops nextstate]\n      (this-as c (.call f c c (props-argv c nextprops) nextstate)))\n\n    ;; Deprecated - will work in 17.x\n    :UNSAFE_componentWillUpdate\n    (fn componentWillUpdate [nextprops nextstate]\n      (this-as c (.call f c c (props-argv c nextprops) nextstate)))\n\n    :componentDidUpdate\n    (fn componentDidUpdate [oldprops oldstate snapshot]\n      (this-as c (.call f c c (props-argv c oldprops) oldstate snapshot)))\n\n    ;; Deprecated - warning in 16.9 will work through 17.x\n    :componentWillMount\n    (fn componentWillMount []\n      (this-as c (.call f c c)))\n\n    ;; Deprecated - will work in 17.x\n    :UNSAFE_componentWillMount\n    (fn componentWillMount []\n      (this-as c (.call f c c)))\n\n    :componentDidMount\n    (fn componentDidMount []\n      (this-as c (.call f c c)))\n\n    :componentWillUnmount\n    (fn componentWillUnmount []\n      (this-as c\n               (some-> (gobj/get c \"cljsRatom\") ratom/dispose!)\n               (batch/mark-rendered c)\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    :componentDidCatch\n    (fn componentDidCatch [error info]\n      (this-as c (.call f c c error info)))\n\n    nil))\n\n(defn get-wrapper [key f]\n  (let [wrap (custom-wrapper key f)]\n    (when (and wrap f)\n      (assert-callable f))\n    (or wrap f)))\n\n;; Though the value is nil here, the wrapper function will be\n;; added to class to manage Reagent ratom lifecycle.\n(def obligatory {:shouldComponentUpdate nil\n                 :componentWillUnmount nil})\n\n(def dash-to-method-name (util/memoize-1 util/dash-to-method-name))\n\n(defn camelify-map-keys [fun-map]\n  (reduce-kv (fn [m k v]\n               (assoc m (-> k dash-to-method-name keyword) v))\n             {} fun-map))\n\n(defn add-obligatory [fun-map]\n  (merge obligatory fun-map))\n\n(defn wrap-funs [fmap]\n  (when (dev?)\n    (let [renders (select-keys fmap [:render :reagentRender])\n          render-fun (-> renders vals first)]\n      (assert (not (:componentFunction fmap)) \":component-function is no longer supported, use :reagent-render instead.\")\n      (assert (pos? (count renders)) \"Missing reagent-render\")\n      (assert (== 1 (count renders)) \"Too many render functions supplied\")\n      (assert-callable render-fun)))\n  (let [render-fun (or (:reagentRender fmap)\n                       (:render fmap))\n        legacy-render (nil? (:reagentRender fmap))\n        name (or (:displayName fmap)\n                 (util/fun-name render-fun)\n                 (str (gensym \"reagent\")))\n        fmap (reduce-kv (fn [m k v]\n                          (assoc m k (get-wrapper k v)))\n                        {} fmap)]\n    (assoc fmap\n           :displayName name\n           :cljsLegacyRender legacy-render\n           :reagentRender render-fun\n           :render (:render static-fns))))\n\n(defn map-to-js [m]\n  (reduce-kv (fn [o k v]\n               (doto o\n                 (gobj/set (name k) v)))\n             #js{} m))\n\n(defn cljsify [body]\n  (-> body\n      camelify-map-keys\n      add-obligatory\n      wrap-funs))\n\n;; Idea from:\n;; https://gist.github.com/pesterhazy/2a25c82db0519a28e415b40481f84554\n;; https://gist.github.com/thheller/7f530b34de1c44589f4e0671e1ef7533#file-es6-class-cljs-L18\n\n(def built-in-static-method-names\n  [:childContextTypes :contextTypes :contextType\n   :getDerivedStateFromProps :getDerivedStateFromError])\n\n(defn create-class\n  \"Creates JS class based on provided Clojure map.\n\n  Map keys should use `React.Component` method names (https://reactjs.org/docs/react-component.html),\n  and can be provided in snake-case or camelCase.\n  Constructor function is defined using key `:getInitialState`.\n\n  React built-in static methods or properties are automatically defined as statics.\"\n  [body]\n  {:pre [(map? body)]}\n  (let [body (cljsify body)\n        methods (map-to-js (apply dissoc body :displayName :getInitialState :constructor\n                                  :render :reagentRender\n                                  built-in-static-method-names))\n        static-methods (map-to-js (select-keys body built-in-static-method-names))\n        display-name (:displayName body)\n        get-initial-state (:getInitialState body)\n        construct (:constructor body)\n        cmp (fn [props context updater]\n              (this-as this\n                (.call react/Component this props context updater)\n                (when construct\n                  (construct this props))\n                (when get-initial-state\n                  (set! (.-state this) (get-initial-state this)))\n                (set! (.-cljsMountOrder ^clj this) (batch/next-mount-count))\n                this))]\n\n    (gobj/extend (.-prototype cmp) (.-prototype react/Component) methods)\n\n    ;; These names SHOULD be mangled by Closure so we can't use goog/extend\n\n    (when (:render body)\n      (set! (.-render ^js (.-prototype cmp)) (:render body)))\n\n    (when (:reagentRender body)\n      (set! (.-reagentRender ^clj (.-prototype cmp)) (:reagentRender body)))\n\n    (when (:cljsLegacyRender body)\n      (set! (.-cljsLegacyRender ^clj (.-prototype cmp)) (:cljsLegacyRender body)))\n\n    (gobj/extend cmp react/Component static-methods)\n\n    (when display-name\n      (set! (.-displayName cmp) display-name)\n      (set! (.-cljs$lang$ctorStr cmp) display-name)\n      (set! (.-cljs$lang$ctorPrWriter cmp)\n            (fn [this writer opt]\n              (cljs.core/-write writer display-name))))\n\n    (set! (.-cljs$lang$type cmp) true)\n    (set! (.. cmp -prototype -constructor) cmp)\n\n    cmp))\n\n(defn fn-to-class [f]\n  (assert-callable f)\n  (warn-unless (not (and (react-class? f)\n                         (not (reagent-class? f))))\n               \"Using native React classes directly in Hiccup forms \"\n               \"is not supported. Use create-element or \"\n               \"adapt-react-class instead: \" (or (util/fun-name f)\n                                                 f)\n               (comp-name))\n  (if (reagent-class? f)\n    (cache-react-class f f)\n    (let [spec (meta f)\n          withrender (assoc spec :reagent-render f)\n          res (create-class withrender)]\n      (cache-react-class f res))))\n\n(defn as-class [tag]\n  (if-some [cached-class (cached-react-class tag)]\n    cached-class\n    (fn-to-class tag)))\n\n(defn reactify-component [comp]\n  (if (react-class? comp)\n    comp\n    (as-class comp)))\n"]}